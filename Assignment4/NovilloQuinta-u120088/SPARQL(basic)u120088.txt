1. Get all the classes
	select distinct ?class where { ?d  a ?class} LIMIT 100

2. Get all the subclasses of the class Establishment
select distinct ?Subclass where {
	?Subclass rdfs:subClassOf <http://GP-onto.fi.upm.es/exercise2#Establishment> 
}

Subclass
http://GP-onto.fi.upm.es/exercise2#Hostel
http://GP-onto.fi.upm.es/exercise2#GuestHouse
http://GP-onto.fi.upm.es/exercise2#Hotel

3. Get all instances of the class City
select distinct ?instancias where {
?instancias a <http://GP-onto.fi.upm.es/exercise2#City> 
}

instancias
http://GP-onto.fi.upm.es/exercise2#ACoruC1a
http://GP-onto.fi.upm.es/exercise2#Santiago_de_Compostela
http://GP-onto.fi.upm.es/exercise2#Madrid

4. Get the number of inhabitants of Santiago de Compostela
select distinct ?NumHabitantes where {
	<http://GP-onto.fi.upm.es/exercise2#Santiago_de_Compostela> <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?NumHabitantes
}

NumHabitantes
" 300000 "^^<http://www.w3.org/2001/XMLSchema#integer>

5. Get the number of inhabitants of Santiago de Compostela and Arzua

select distinct ?HabitantesSantiago ?HabitantesAzura
where
{
	<http://GP-onto.fi.upm.es/exercise2#Santiago_de_Compostela> <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?HabitantesSantiago .
	<http://GP-onto.fi.upm.es/exercise2#Arzua> <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?HabitantesAzura
}

HabitantesSantiago	HabitantesAzura
" 300000 "^^<http://www.w3.org/2001/XMLSchema#integer>	" 38900 "^^<http://www.w3.org/2001/XMLSchema#integer>

6. Get all places, together with the number of inhabitants, ordered by the place name (ascending)
select distinct ?Ciudades ?Habitantes
where
{
	?x <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?Habitantes .
	?x rdfs:label ?Ciudades.
}
ORDER BY ASC(?Ciudades)

Ciudades				Habitantes
Arzua					" 38900 "^^<http://www.w3.org/2001/XMLSchema#integer>
Santiago_de_Compostela	" 300000 "^^<http://www.w3.org/2001/XMLSchema#integer>

7. Get all instances of Locality together with their number of inhabitants (if this information exists)
select distinct ?Ciudades ?Habitantes
where
{
	?z rdfs:subClassOf <http://GP-onto.fi.upm.es/exercise2#Locality>.
	?Ciudades rdf:type ?z
	OPTIONAL{?Ciudades <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?Habitantes}
}

Ciudades	Habitantes
http://GP-onto.fi.upm.es/exercise2#ACoruC1a	
http://GP-onto.fi.upm.es/exercise2#Santiago_de_Compostela	" 300000 "^^<http://www.w3.org/2001/XMLSchema#integer>
http://GP-onto.fi.upm.es/exercise2#Madrid	
http://GP-onto.fi.upm.es/exercise2#Arzua	" 38900 "^^<http://www.w3.org/2001/XMLSchema#integer>

8. Get all places with more than 200.000 inhabitants

prefix gp: <http://GP-onto.fi.upm.es/exercise2#> 
select ?lugares ?Habitantes
where
 { 
 ?lugares gp:hasInhabitantNumber ?Habitantes
 FILTER(?Habitantes > 200000) 
}

9. Get postal address data for Pazo_Breogan (street, number, locality, province)

PREFIX pfz: <http://GP-onto.fi.upm.es/exercise2#> 
select ?localite ?province ?stree ?num 
where 
{ 
	pfz:Pazo_Breogan pfz:hasAddress ?dir; 
	pfz:isPlacedIn ?localite. 
	?localidad pfz:inProvince ?province. 
	?dir pfz:hasStreet ?stree; 
	pfz:hasNumber ?num.
}


10. Get all subclasses of class Location
select distinct ?Subclass where {
	?Subclass rdfs:subClassOf <http://GP-onto.fi.upm.es/exercise2#Location> 
}

Subclass
http://GP-onto.fi.upm.es/exercise2#LocationOfInterest

11. Get all instances of class Locality
select  ?Instancias
where
{
	?x rdfs:subClassOf <http://GP-onto.fi.upm.es/exercise2#Locality>.
	?y ?z ?x.
	?y rdfs:label ?Instancias
}

Instancias
A Coruña
Santiago_de_Compostela
Madrid
Arzua

12. Describe the resource with rdfs:label "Madrid”

DESCRIBE ?Resource where {
	?Recurso rdfs:label "Madrid"
}

@prefix ns0:	<http://GP-onto.fi.upm.es/exercise2#> .
ns0:GP_Santiago_Instance_72	ns0:hasEnd	ns0:Madrid .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
ns0:Madrid	rdf:type	ns0:City .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
ns0:Madrid	rdfs:label	"Madrid" ;
	ns0:isLocatedAtPoint	ns0:GP_Santiago_Instance_74 ;
	ns0:inProvince	"Madrid" .

13. Construct a graph that relates directly all touristic places with 
their provinces, using a new property called ”isIn”

prefix gp: <http://GP-onto.fi.upm.es/exercise2#>
construct 
{
?x gp:isIn ?Province
}
where
{
?x gp:isPlacedIn ?Localite.?Localite gp:inProvince ?Province
}

@prefix ns0:	<http://GP-onto.fi.upm.es/exercise2#> .
ns0:Fuente_Talaverana	ns0:isIn	"Pontevedra" .
ns0:Monte_Do_Gozo	ns0:isIn	"Pontevedra" .
ns0:Cathedral_Santiago_Compostela	ns0:isIn	"Pontevedra" .
ns0:Pazo_Breogan	ns0:isIn	"Pontevedra" .


14. Check whether there is any instance of Town

prefix gp: <http://GP-onto.fi.upm.es/exercise2#> 
ask 
where 
{
	?Instance a gp:Town
}

True
